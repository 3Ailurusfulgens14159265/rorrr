#include <iostream>
#include <vector>

template <class T>
class Uravnenie {
public:
    void Add(T a = 0, T b = 0, T c = 0) {
        dataA.push_back(a);
        dataB.push_back(b);
        dataC.push_back(c);
        counter++;
    }

    void Del(T a, T b, T c) {
        for (int i = 0; i < counter; i++) {
            if (dataA[i] == a && dataB[i] == b && dataC[i] == c) {
                dataA.erase(dataA.begin() + i);
                dataB.erase(dataB.begin() + i);
                dataC.erase(dataC.begin() + i);
                counter--;
                return;
            }
        }
        std::cout << "Net takogo uravnenniya" << std::endl;
    }

    void Reshenie() {
        double D, x1, x2;
        T a, b, c;
        std::cout << "Resheniya: " << std::endl;
        for (int i = 0; i < counter; i++) {
            std::cout << dataA[i] << " * x^2 + " << dataB[i] << " * x + " << dataC[i] << " = 0" << std::endl;
            a = dataA[i];
            b = dataB[i];
            c = dataC[i];

            D = b * b - 4 * a * c;
            if (D < 0) {
                std::cout << "korney net" << std::endl;
            }
            else {
                x1 = (-b - sqrt(D)) / (2 * a);
                x2 = (-b + sqrt(D)) / (2 * a);
                std::cout << "x1 = " << x1 << "; x2 = " << x2 << ";" << std::endl;
            }
        }
        
    }

    void Print() {
        std::cout << "Uravneniya: " << std::endl;
        for (int i = 0; i < counter; i++) {
            std::cout << dataA[i] << " * x^2 + " << dataB[i] << " * x + " << dataC[i] << " = 0" << std::endl;
        }
    }

private:
    std::vector<T> dataA;
    std::vector<T> dataB;
    std::vector<T> dataC;
    int counter = 0;
};

template <>
class Uravnenie<const char*> {
public:
    void Add(const char* a = "", const char* b = "", const char* c = "") {
        dataA.push_back(a);
        dataB.push_back(b);
        dataC.push_back(c);
        counter++;
    }

    void Del(const char* a, const char* b, const char* c) {
        for (int i = 0; i < counter; i++) {
            if (dataA[i] == a && dataB[i] == b && dataC[i] == c) {
                dataA.erase(dataA.begin() + i);
                dataB.erase(dataB.begin() + i);
                dataC.erase(dataC.begin() + i);
                counter--;
                return;
            }
        }
        std::cout << "Net takogo uravnenniya" << std::endl;
    }

    void Reshenie() {
        double D, x1, x2;
        double a;
        double b;
        double c;

        std::cout << "Resheniya: " << std::endl;
        for (int i = 0; i < counter; i++) {
            std::cout << dataA[i] << " * x^2 + " << dataB[i] << " * x + " << dataC[i] << " = 0" << std::endl;
            a = atoi(dataA[i]);
            b = atoi(dataB[i]);
            c = atoi(dataC[i]);

            D = b * b - 4 * a * c;
            if (D < 0) {
                std::cout << "korney net" << std::endl;
            }
            else {
                x1 = (-b - sqrt(D)) / (2 * a);
                x2 = (-b + sqrt(D)) / (2 * a);
                std::cout << "x1 = " << x1 << "; x2 = " << x2 << ";" << std::endl;
            }
        }
    }

    void Print() {
        std::cout << "Uravneniya: " << std::endl;
        for (int i = 0; i < counter; i++) {
            std::cout << dataA[i] << " * x^2 + " << dataB[i] << " * x + " << dataC[i] << " = 0" << std::endl;
        }
    }

private:
    std::vector<const char*> dataA;
    std::vector<const char*> dataB;
    std::vector<const char*> dataC;
    int counter = 0;
};

int main() {
    Uravnenie<int> test;
    test.Add(1, 2, 4);
    test.Add(3, 8, 4);
    test.Add(1, 5, 12);
    test.Print();
    test.Del(1, 5, 12);
    test.Reshenie();


    Uravnenie<const char*> testChar;
    testChar.Add("1", "2", "4");
    testChar.Add("3", "8", "4");
    testChar.Add("1", "5", "12");
    testChar.Print();
    testChar.Del("1", "2", "4");
    testChar.Reshenie();
    
  
    return 0;
}
