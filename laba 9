#pragma once
#include <iostream>
#include <string>
#include <locale.h>
#include <algorithm> 
#include<vector>
#include<iterator>
#include <fstream>
#include <list>
using namespace std;
class Cartoon
{
public:
	Cartoon(string name, int year) {
		this->name = name;
		this->year = year;
	}

	Cartoon() {
		year = 2000;
		name = "default";
	}
	int getYear()
	{
		return this->year;
	}

public:
	string name;
	int year;
};
class ExceptionStack
{
public:
	ExceptionStack(std::string error)
	{
		m_exception = error;
	}
	const char* getError()
	{

		return m_exception.c_str();
	}

private:
	std::string m_exception;
};

bool operator<(const Cartoon& a, const Cartoon& b)
{
	return (a.year < b.year);
}

bool operator==(const Cartoon& a, const Cartoon& b)
{
	return a.year == b.year ;
}

class Functions
{
public:
	Functions();
	static void func3(std::vector<Cartoon>::iterator begin, std::vector<Cartoon>::iterator end, vector<Cartoon>& p)
	{
		
		
		//оператор проверки на равенство для unique
		
		sort(p.begin(), p.end());
		p.resize(unique(p.begin(), p.end()) - p.begin());
			
	}
	static int func2(std::vector<Cartoon>::const_iterator begin, std::vector<Cartoon>::const_iterator end,int year)
	{
		
		end++;
		int count = 0;
		for (; begin != end; begin++)
		{
			if ((*begin).year==year)
			{
				return count;
			}
			count++;
		}
		return -1;

	}

	static void func1(list<string>& L)
	{

		ifstream fin;
		ofstream fout;
		fin.open("filein.txt");
		fout.open("fileout.txt");
		try
		{

			if (!fin.is_open())
			{
				throw ExceptionStack("Can`t open file\n");
			}
		}
		catch (ExceptionStack exception)
		{
			cerr << exception.getError();
		}
		string buf;

		while (getline(fin, buf))
		{
			buf += "1";
			L.push_back(buf);
			fout << buf << '\n';
		}


	}

};

#include "Header.h"
void menu()
{
	using namespace std;
	cout << " что желаете: 1-push 2-Search 3-popValue 4-print  5-linked list 0-выход";

}
int main()
{
	setlocale(LC_ALL, "Russian");
	vector<Cartoon> myStack;
	int x;
	while (1)
	{
		menu();
		try
		{
			cin >> x;
			if (x < 0 || x>6)
				throw ExceptionStack("Invalid x,input correct x\n");
		}
		catch (ExceptionStack exception)
		{
			cerr << exception.getError();
		}

		if (x == 1)
		{
			cout << "Введите year и name:";
			int year;
			string name;
			try
			{
				cin >> year >> name;
				if (year < 1700)
				{
					throw ExceptionStack("Invalid id,input correct id\n");
				}
			}
			catch (ExceptionStack exception)
			{
				cerr << exception.getError();
			}
			Cartoon cart = { name,year };
			myStack.push_back(cart);

		}
		if (x == 2)
		{
			cout << "Введите год для поиска дубликата";
			int vvod;
			string stroka;
			try
			{
				cin >> vvod;
				auto it1 = myStack.begin();
				auto it2 = myStack.end();
				it2--;
				vvod = Functions::func2(it1, it2, vvod);
				if (vvod == -1)
				{
					cout << "Данный год не имеет дубликатов";
				}
				else
				{
					cout << "Данный год имеет дубликат на " << vvod << " позиции";
				}


			}
			catch (ExceptionStack exception)
			{
				cerr << exception.getError();
			}

		}
		if (x == 3)
		{

			auto it1 = myStack.begin();
			auto it2 = myStack.end();

			try
			{
				Functions::func3(it1, it2,myStack);

			}
			catch (ExceptionStack exception)
			{
				cerr << exception.getError();
			}
		}
		if (x == 4)
		{

			try
			{
				vector<Cartoon>::const_iterator it = myStack.begin();

				while (it != myStack.end())
				{
					cout << it->year << " " << it->name << endl;
					++it;
				}

			}
			catch (ExceptionStack exception)
			{
				cerr << exception.getError();
			}
		}
		if (x == 5)
		{
			list<string> L;
			Functions::func1(L);
			auto it = L.begin();
			while (it != L.end())
			{
				cout << *it << endl;
				it++;
			}
		}
		if (x == 0)
		{
			break;
		}
	}

}
